---
import { getCollection } from 'astro:content';
import { Search } from 'lucide-astro';
import NavMenu from './NavMenu.astro';

const allPatterns = await getCollection('patterns');

// Ordena os padrões alfabeticamente pelo nome
allPatterns.sort((a, b) => a.data.title.localeCompare(b.data.title));

// Agrupa os padrões por categoria
const patternsByCategory = allPatterns.reduce((acc, pattern) => {
  const { category } = pattern.data;
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(pattern);
  return acc;
}, {});

const currentPath = new URL(Astro.request.url).pathname;
---
<aside id="sidebar" class="w-72 bg-base-200 border-r hidden md:block">
  <div class="p-4 h-full flex flex-col gap-4">
    <label class="relative">
      <Search class="absolute left-3 top-1/2 -translate-y-1/2 opacity-60" size={18} />
      <input type="text" id="sidebar-search" placeholder="Buscar padrões..." class="input input-bordered w-full pl-10" />
    </label>
    <NavMenu patternsByCategory={patternsByCategory} currentPath={currentPath} />
  </div>
</aside>

<script>
  import Fuse from 'fuse.js';

  // 1. Pega todos os itens da lista que podem ser pesquisados
  const listItems = Array.from(document.querySelectorAll('.nav-item'));
  const patterns = listItems.map(item => ({
    name: item.dataset.name,
    keywords: item.dataset.keywords,
    element: item,
  }));

  // 2. Configura o Fuse.js para uma busca fuzzy
  const fuse = new Fuse(patterns, {
    keys: ['name', 'keywords'],
    threshold: 0.4,
    includeScore: true,
  });

  // 3. Adiciona o listener de evento ao campo de busca
  const searchInput = document.getElementById('sidebar-search');
  searchInput.addEventListener('input', (e) => {
    const query = e.target.value.trim();

    // Se a busca está vazia, mostra tudo
    if (!query) {
      listItems.forEach(item => item.style.display = 'list-item');
      document.querySelectorAll('.category-group').forEach(group => group.style.display = 'block');
      return;
    }

    // Caso contrário, usa o Fuse.js para encontrar os resultados
    const results = fuse.search(query);
    const visibleElements = new Set(results.map(r => r.item.element));

    // Esconde todos os itens e depois mostra apenas os resultados
    listItems.forEach(item => {
      if (visibleElements.has(item)) {
        item.style.display = 'list-item';
      } else {
        item.style.display = 'none';
      }
    });

    // Esconde os títulos de categoria que não têm itens visíveis
    document.querySelectorAll('.category-group').forEach(group => {
      const hasVisibleChild = group.querySelector('.nav-item[style*="display: list-item"]');
      if (hasVisibleChild) {
        group.style.display = 'block';
      } else {
        group.style.display = 'none';
 }
    });
  });
</script>

