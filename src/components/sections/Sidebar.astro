---
import { getCollection } from 'astro:content';
import { Search } from 'lucide-astro';

const allPatterns = await getCollection('patterns');

// Ordena os padrões alfabeticamente pelo nome
allPatterns.sort((a, b) => a.data.title.localeCompare(b.data.title));

// Agrupa os padrões por categoria
const patternsByCategory = allPatterns.reduce((acc, pattern) => {
  const { category } = pattern.data;
  if (!acc[category]) {
    acc[category] = [];
  }
  acc[category].push(pattern);
  return acc;
}, {});

const currentPath = new URL(Astro.request.url).pathname;
---
<aside class="sidebar">
  <div class="search-wrapper">
    <Search class="search-icon" size={18} />
    <input type="text" id="sidebar-search" placeholder="Buscar padrões..." />
  </div>
  <nav class="nav-links">
    <ul>
      <li class="category-group">
        <p class="category-title">Guias de Decisão</p>
        <ul>
          <li class="nav-item" data-name="como escolher sua arquitetura guia" data-keywords="guias decisão arquitetura escolher">
            <a href="/guides/how-to-choose/" class:list={{ active: currentPath.startsWith('/guides/') }}>
              Como Escolher...
            </a>
          </li>
        </ul>
      </li>
      {Object.entries(patternsByCategory).map(([category, patterns]) => (
        <li class="category-group">
          <p class="category-title">{category}</p>
          <ul>
            {patterns.map(pattern => {
              const href = `/patterns/${pattern.slug}/`;
              const isActive = currentPath === href;
              return (
                <li class="nav-item" data-name={pattern.data.title.toLowerCase()} data-keywords={pattern.slug}>
                  <a href={href} class:list={{ active: isActive }}>
                    {pattern.data.title}
                  </a>
                </li>
              );
            })}
          </ul>
        </li>
      ))}
    </ul>
  </nav>
</aside>

<script>
  import Fuse from 'fuse.js';

  // 1. Pega todos os itens da lista que podem ser pesquisados
  const listItems = Array.from(document.querySelectorAll('.nav-item'));
  const patterns = listItems.map(item => ({
    name: item.dataset.name,
    keywords: item.dataset.keywords,
    element: item,
  }));

  // 2. Configura o Fuse.js para uma busca fuzzy
  const fuse = new Fuse(patterns, {
    keys: ['name', 'keywords'],
    threshold: 0.4,
    includeScore: true,
  });

  // 3. Adiciona o listener de evento ao campo de busca
  const searchInput = document.getElementById('sidebar-search');
  searchInput.addEventListener('input', (e) => {
    const query = e.target.value.trim();

    // Se a busca está vazia, mostra tudo
    if (!query) {
      listItems.forEach(item => item.style.display = 'list-item');
      document.querySelectorAll('.category-group').forEach(group => group.style.display = 'block');
      return;
    }

    // Caso contrário, usa o Fuse.js para encontrar os resultados
    const results = fuse.search(query);
    const visibleElements = new Set(results.map(r => r.item.element));

    // Esconde todos os itens e depois mostra apenas os resultados
    listItems.forEach(item => {
      if (visibleElements.has(item)) {
        item.style.display = 'list-item';
      } else {
        item.style.display = 'none';
      }
    });

    // Esconde os títulos de categoria que não têm itens visíveis
    document.querySelectorAll('.category-group').forEach(group => {
      const hasVisibleChild = group.querySelector('.nav-item[style*="display: list-item"]');
      if (hasVisibleChild) {
        group.style.display = 'block';
      } else {
        group.style.display = 'none';
 }
    });
  });
</script>

<style>
  .sidebar {
    grid-area: sidebar;
    background-color: var(--secondary);
    border-right: 1px solid var(--border);
    padding: 1.5rem;
    overflow-y: auto;
    display: none; /* Escondido em mobile por padrão */
  }

  @media (min-width: 768px) {
    .sidebar {
      display: block;
    }
  }

  .search-wrapper {
    position: relative;
    margin-bottom: 1.5rem;
  }

  .search-icon {
    position: absolute;
    top: 50%;
    left: 0.75rem;
    transform: translateY(-50%);
    color: var(--muted-foreground);
  }

  #sidebar-search {
    width: 100%;
    padding: 0.5rem 0.75rem 0.5rem 2.5rem;
    background-color: var(--background);
    border: 1px solid var(--border);
    border-radius: 0.5rem;
    color: var(--foreground);
    font-size: 0.9rem;
  }

  .nav-links ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .category-group {
    margin-bottom: 1.5rem;
  }

  .category-title {
    font-size: 0.8rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: var(--muted-foreground);
    margin: 0 0 0.5rem 0.5rem;
  }
  
  .nav-item a {
    display: block;
    padding: 0.5rem 1rem;
    border-radius: 0.375rem;
    text-decoration: none;
    color: var(--foreground);
    transition: background-color 0.15s ease-in-out, color 0.15s ease-in-out;
    font-size: 0.9rem;
  }

  .nav-item a:hover {
    background-color: var(--accent);
  }

  .nav-item a.active {
    background-color: var(--primary);
    color: var(--primary-foreground);
    font-weight: 500;
  }
</style> 