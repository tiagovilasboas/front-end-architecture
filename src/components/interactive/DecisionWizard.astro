---
// Componente para o Wizard de Decisão Arquitetural
import { getCollection } from 'astro:content';
import DynamicIcon from '../DynamicIcon.astro';
import PatternCard from './PatternCard.astro';

const allPatterns = await getCollection('patterns');
---

<div class="container mx-auto flex flex-col gap-8">
  <div class="grid gap-8 md:grid-cols-2">
    <div class="space-y-4">
      <h3 class="flex items-center gap-2 text-lg font-semibold">
        <DynamicIcon name="users" size={20} />
        Qual o tamanho do seu time?
      </h3>
      <div class="segment-control flex flex-wrap gap-2">
        <button class="segment option-card" data-filter="teamSize" data-value="small">
          <span class="card-title">Pequeno</span>
          <span class="card-desc text-xs opacity-70">(1-5 pessoas)</span>
        </button>
        <button class="segment option-card" data-filter="teamSize" data-value="medium">
          <span class="card-title">Médio</span>
          <span class="card-desc text-xs opacity-70">(6-15 pessoas)</span>
        </button>
        <button class="segment option-card" data-filter="teamSize" data-value="large">
          <span class="card-title">Grande</span>
          <span class="card-desc text-xs opacity-70">(+15 / Múltiplos times)</span>
        </button>
      </div>
    </div>

    <div class="space-y-4">
      <h3 class="flex items-center gap-2 text-lg font-semibold">
        <DynamicIcon name="puzzle" size={20} />
        Qual a complexidade do produto?
      </h3>
      <div class="segment-control flex flex-wrap gap-2">
        <button class="segment option-card" data-filter="complexity" data-value="low">
          <span class="card-title">Baixa</span>
          <span class="card-desc text-xs opacity-70">(Site de conteúdo, Landing Page)</span>
        </button>
        <button class="segment option-card" data-filter="complexity" data-value="medium">
          <span class="card-title">Média</span>
          <span class="card-desc text-xs opacity-70">(Dashboard, App CRUD)</span>
        </button>
        <button class="segment option-card" data-filter="complexity" data-value="high">
          <span class="card-title">Alta</span>
          <span class="card-desc text-xs opacity-70">(Editor, Super App)</span>
        </button>
      </div>
    </div>
  </div>

  <div class="grid gap-6 md:grid-cols-2 xl:grid-cols-3" id="results-grid">
    {allPatterns.map(pattern => (
      <div id={pattern.slug} class="pattern-wrapper">
        <PatternCard {pattern} />
      </div>
    ))}
  </div>
</div>

<script>
  // Mapeamento de recomendações. Cada padrão recebe um "match" ideal.
  const PATTERN_RECOMMENDATIONS = {
    'spa': { teamSize: 'medium', complexity: 'medium' },
    'jamstack': { teamSize: 'small', complexity: 'low' },
    'islands-architecture': { teamSize: 'small', complexity: 'low' },
    'micro-frontends': { teamSize: 'large', complexity: 'high' },
    'clean-architecture': { teamSize: 'medium', complexity: 'high' },
    'atomic-design': { teamSize: 'medium', complexity: 'medium' },
    'component-driven': { teamSize: 'small', complexity: 'low' },
    'state-machines': { teamSize: 'small', complexity: 'high' },
    'monorepo': { teamSize: 'large', complexity: 'high' },
  };

  const filters = {
    teamSize: null,
    complexity: null,
  };

  const filterButtons = document.querySelectorAll('.option-card');
  const patternWrappers = document.querySelectorAll('.pattern-wrapper');
  const resultsGrid = document.getElementById('results-grid');

  function updateResults() {
    const scores = {};

    patternWrappers.forEach(wrapper => {
      const id = wrapper.id;
      scores[id] = 0;
      const recommendation = PATTERN_RECOMMENDATIONS[id];
      if (!recommendation) return;

      // Lógica de pontuação simples
      if (filters.teamSize && filters.teamSize === recommendation.teamSize) {
        scores[id] += 2;
      }
      if (filters.complexity && filters.complexity === recommendation.complexity) {
        scores[id] += 2;
      }
      if (filters.teamSize === 'large' && (id === 'micro-frontends' || id === 'monorepo')) {
        scores[id] += 1;
      }
    });

    const sortedPatterns = Array.from(patternWrappers).sort((a, b) => {
      return scores[b.id] - scores[a.id];
    });
    
    // Reordena os elementos no DOM
    sortedPatterns.forEach(el => resultsGrid.appendChild(el));

    // Aplica estilo com base na pontuação
    patternWrappers.forEach(wrapper => {
        const score = scores[wrapper.id];
        if (!filters.teamSize && !filters.complexity) {
            wrapper.style.opacity = '1';
            wrapper.style.transform = 'scale(1)';
        } else {
            if (score > 0) {
                wrapper.style.opacity = '1';
                wrapper.style.transform = 'scale(1)';
            } else {
                wrapper.style.opacity = '0.5';
                wrapper.style.transform = 'scale(0.95)';
            }
        }
    });
  }

  filterButtons.forEach(button => {
    button.addEventListener('click', () => {
      const filter = button.dataset.filter;
      const value = button.dataset.value;
      
      const parent = button.parentElement;
      parent.querySelectorAll('.option-card').forEach(btn => btn.classList.remove('segment-selected'));
      
      if (filters[filter] === value) {
        filters[filter] = null; // Desselecionar
      } else {
        button.classList.add('segment-selected');
        filters[filter] = value;
      }
      
      updateResults();
    });
  });

  // Estado inicial
  updateResults();
</script>

